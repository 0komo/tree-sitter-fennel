===
numbers
===

1
1.0
+1
-1
-1.0
.1
+.1
1e1
1e-1
1_0.1_0
0x1
-0x1
0x1.1
+0x1.1
0x1p1
-0x1_0.1_0p1_0

---

(program
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number))

===
double quote strings
===

"string"
"string\""
"string\\"
"\115\116\114"
"\x32\u{33}"

---

(program
  (string
    (string_content))
  (string
    (string_content
      (escape_sequence)))
  (string
    (string_content
      (escape_sequence)))
  (string
    (string_content
      (escape_sequence)
      (escape_sequence)
      (escape_sequence)))
  (string
    (string_content
      (escape_sequence)
      (escape_sequence))))

===
colon strings
===

:test
:*
:#
:?
:-
:+
:9
:_
:/
:<
:>
:=
:^
:.
::
:true
:false
:nil

---

(program
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content)))

===
quote
===

'[]
`123
`(+ ,a ,b)
`("")
'(fn)
'(let [x (each [y] z)])

---
(program
  (reader_macro
    (sequence))
  (reader_macro
    (number))
  (reader_macro
    (list
      (symbol)
      (reader_macro (symbol))
      (reader_macro (symbol))))
  (reader_macro
    (list
      (string)))
  (reader_macro
    (list
      (symbol)))
  (reader_macro
    (list
      (symbol)
      (sequence
        (symbol)
        (list
          (symbol)
          (sequence
            (symbol))
          (symbol))))))

===
symbols
===

a
?a
a?
a-b-c
a_b_c
$1
$
$...
<>
test#test#test
.
..
...
?.
&
:
#
~=

---

(program
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol))

===
multi symbols
===

string.format
a.b.c.d.e.f.g
&bl>/?.asd

---

(program
  (multi_symbol
    (symbol_fragment)
    (symbol_fragment))
  (multi_symbol
    (symbol_fragment)
    (symbol_fragment)
    (symbol_fragment)
    (symbol_fragment)
    (symbol_fragment)
    (symbol_fragment)
    (symbol_fragment))
  (multi_symbol
    (symbol_fragment)
    (symbol_fragment)))

===
booleans + nil
===

true
false
nil

---

(program
  (boolean)
  (boolean)
  (nil))

===
tables
===

{: value
 (+ 1 2) #nil
 "key" value
 :#$le_key :mamamia
 69 24
 ?. (fn [x] (+ x 2))}

{key value}

---

(program
  (table
    (table_pair
      key: (symbol)
      value: (symbol))
    (table_pair
      key: (list
             (symbol)
             (number)
             (number))
      value: (reader_macro
               expression: (nil)))
    (table_pair
      key: (string (string_content))
      value: (symbol))
    (table_pair
      key: (string (string_content))
      value: (string (string_content)))
    (table_pair
      key: (number)
      value: (number))
    (table_pair
      key: (symbol)
      value: (list
               (symbol)
               (sequence
                 (symbol))
               (list
                 (symbol)
                 (symbol)
                 (number)))))
  (table
    (table_pair
      key: (symbol)
      value: (symbol))))

===
sequences / sequential tables
===

["abd" :lol ?. : #true]

---

(program
  (sequence
    (string (string_content))
    (string (string_content))
    (symbol)
    (symbol)
    (reader_macro
      (boolean))))

===
comments
===

; this is a comment
;; ayo, another comment!
;;;;;;;;;;;;;; WOOOOOOOOOOOOOOOOOOOOOOO!

(fn ;
 foo ;
 [ ;
 x ;
 ] ;
 x ;
 ) ;

---

(program
  (comment)
  (comment)
  (comment)
  (list
    (symbol) (comment)
    (symbol) (comment)
    (sequence (comment)
      (symbol) (comment)) (comment)
    (symbol) (comment)) (comment))

===
reader macros
===

#(+ $1 $2)
#$3
#[$1 $2 $3]
#$
#val
#{: one : two}

---

(program
  (reader_macro
    expression: (list
                  (symbol)
                  (symbol)
                  (symbol)))
  (reader_macro
    expression: (symbol))
  (reader_macro
    expression: (sequence
                  (symbol)
                  (symbol)
                  (symbol)))
  (reader_macro
    expression: (symbol))
  (reader_macro
    expression: (symbol))
  (reader_macro
    expression: (table
                  (table_pair
                    key: (symbol)
                    value: (symbol))
                  (table_pair
                    key: (symbol)
                    value: (symbol)))))
