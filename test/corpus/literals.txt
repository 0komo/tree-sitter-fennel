===
numbers
===

1
1.0
+1
-1
-1.0
.1
+.1
1e1
1e-1
1_0.1_0
0x1
-0x1
0x1.1
+0x1.1
0x1p1
-0x1_0.1_0p1_0

---

(program
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number)
  (number))

===
double quote strings
===

"string"
"string\""
"string\\"
"\115\116\114"
"\x32\u{33}"

---

(program
  (string
    (string_content))
  (string
    (string_content
      (escape_sequence)))
  (string
    (string_content
      (escape_sequence)))
  (string
    (string_content
      (escape_sequence)
      (escape_sequence)
      (escape_sequence)))
  (string
    (string_content
      (escape_sequence)
      (escape_sequence))))

===
colon strings
===

:test
:*
:#
:#lol
:?
:-
:+
:9
:_
:/
:<
:>
:=
:^
:.
::
:true
:false
:nil

---

(program
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content))
  (string (string_content)))

===
symbols
===

a
?a
a?
a-b-c
a_b_c
$1
$
$...
<>
test#test#test
.
..
...
?.
:
#
~=

---

(program
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol)
  (symbol))

===
symbol options
===

&
&asdaskldjh
&#hoi

---

(program
  (symbol_option)
  (symbol_option)
  (symbol_option))

===
multi symbols
===

string.format
a.b.c.d.e.f.g
ha.#haha
$bl>/?.asd

---

(program
  (multi_symbol
    (symbol_fragment)
    (symbol_fragment))
  (multi_symbol
    (symbol_fragment)
    (symbol_fragment)
    (symbol_fragment)
    (symbol_fragment)
    (symbol_fragment)
    (symbol_fragment)
    (symbol_fragment))
  (multi_symbol
    (symbol_fragment)
    (symbol_fragment))
  (multi_symbol
    (symbol_fragment)
    (symbol_fragment)))

===
booleans + nil
===

true
false
nil

---

(program
  (boolean)
  (boolean)
  (nil))

===
tables
===

{: value
 (+ 1 2) #nil
 "key" value
 :#$le_key :mamamia
 69 24
 ?. nestro}

{key value}

---

(program
  (table
    key: (symbol)
    value: (symbol)
    key: (list
           call: (symbol)
           item: (number)
           item: (number))
    value: (hashfn_reader_macro
             expression: (nil))
    key: (string
           content: (string_content))
    value: (symbol)
    key: (string
           content: (string_content))
    value: (string
             content: (string_content))
    key: (number)
    value: (number)
    key: (symbol)
    value: (symbol))
  (table
    key: (symbol)
    value: (symbol)))

===
sequences / sequential tables
===

["abd" :lol ?. : #true]
[a b & cs]

---

(program
  (sequence
    (string (string_content))
    (string (string_content))
    (symbol)
    (symbol)
    (hashfn_reader_macro
      (boolean)))
  (sequence
    (symbol)
    (symbol)
    (symbol_option)
    (symbol)))

===
comments
===

; this is a comment
;; ayo, another comment!
;;;;;;;;;;;;;; WOOOOOOOOOOOOOOOOOOOOOOO!

(;
 fn ;
 foo ;
 [ ;
 x ;
 ] ;
 x ;
 ) ;

---

(program
  (comment)
  (comment)
  (comment)
  (fn_form
    (comment)
    call: (symbol) (comment)
    name: (symbol) (comment)
    args: (sequence_arguments (comment)
            item: (symbol_binding) (comment)) (comment)
    item: (symbol) (comment)) (comment))

===
reader macros
===

'[]
`123
`(+ ,a ,b)
`("")
'(bleh)
#(+ $1 $2)
#$3
#[$1 $2 $3]
#$
#val
#{: one : two}

---

(program
  (quote_reader_macro
    expression: (sequence))
  (quasi_quote_reader_macro
    expression: (number))
  (quasi_quote_reader_macro
    expression: (list
                  call: (symbol)
                  item: (unquote_reader_macro
                          expression: (symbol))
                  item: (unquote_reader_macro
                          expression: (symbol))))
  (quasi_quote_reader_macro
    expression: (list
                  call: (string)))
  (quote_reader_macro
    expression: (list
                  call: (symbol)))
  (hashfn_reader_macro
    expression: (list
                  call: (symbol)
                  item: (symbol)
                  item: (symbol)))
  (hashfn_reader_macro
    expression: (symbol))
  (hashfn_reader_macro
    expression: (sequence
                  item: (symbol)
                  item: (symbol)
                  item: (symbol)))
  (hashfn_reader_macro
    expression: (symbol))
  (hashfn_reader_macro
    expression: (symbol))
  (hashfn_reader_macro
    expression: (table
                  key: (symbol)
                  value: (symbol)
                  key: (symbol)
                  value: (symbol))))

===
bindings
===

(local lol 42)
(local (a b c) 42)
(local [a b c] 42)
(local [a b & cs] 42)
(local {:A a : b &as cs} 42)

---

(program
  (local_form
    call: (symbol)
    lhs: (symbol_binding)
    rhs: (number))
  (local_form
    call: (symbol)
    lhs: (list_binding
           item: (symbol_binding)
           item: (symbol_binding)
           item: (symbol_binding))
    rhs: (number))
  (local_form
    call: (symbol)
    lhs: (sequence_binding
           item: (symbol_binding)
           item: (symbol_binding)
           item: (symbol_binding))
    rhs: (number))
  (local_form
    call: (symbol)
    lhs: (sequence_binding
           item: (symbol_binding)
           item: (symbol_binding)
           item: (rest_binding
                   lhs: (symbol_option)
                   rhs: (symbol_binding)))
    rhs: (number))
  (local_form
    call: (symbol)
    lhs: (table_binding
           key: (string_binding
                  content: (string_content))
           value: (symbol_binding)
           key: (symbol_binding)
           value: (symbol_binding)
           key: (symbol_option)
           value: (symbol_binding))
    rhs: (number))
  )
