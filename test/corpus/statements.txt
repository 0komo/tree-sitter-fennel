===
shebang
===

#!/usr/bin/env fennel
(print "Yummy!")

---

(program
  (shebang)
  (list
    call: (symbol)
    item: (string
            content: (string_content))))

===
let form
===

(let [key value
      (key) #()]
  (print :one)
  (print "two"))

---

(program
  (let_form
    call: (symbol)
    vars: (let_form_vars
            lhs: (symbol_binding)
            rhs: (symbol)
            lhs: (list_binding
                   item: (symbol_binding))
            rhs: (hashfn_reader_macro
                   expression: (list)))
    item: (list
            call: (symbol)
            item: (string
                    content: (string_content)))
    item: (list
            call: (symbol)
            item: (string
                    content: (string_content)))))

===
function call
===

(test 1 a)
(test (test))

---

(program
  (list
    (symbol)
    (number)
    (symbol))
  (list
    (symbol)
    (list
      (symbol))))

===
method call
===

(foo.bar.baz:method :arg)
(foo.bar.baz :method :arg)

---

(program
  (list
    call: (multi_symbol_method
            base: (multi_symbol
                    base: (symbol_fragment)
                    member: (symbol_fragment)
                    member: (symbol_fragment))
            method: (symbol_fragment))
    item: (string
            content: (string_content)))
  (list
    call: (multi_symbol
            base: (symbol_fragment)
            member: (symbol_fragment)
            member: (symbol_fragment))
    item: (string
            content: (string_content))
    item: (string
            content: (string_content))))

===
function/lambda definition
===

(fn abcs [a b c] {: a : b : c})
(fn abcs-but-with-varargs [a b ...] [...])

(lambda ab.cs [a b & cs]
  (print a)
  (print b)
  (print cs))

(λ ooo-docstring [] :docstring a)
(λ booo-no-docstring [] :not-docstring)

---

(program
  (list
    call: (symbol)
    item: (symbol)
    item: (sequence
            item: (symbol)
            item: (symbol)
            item: (symbol))
    item: (table
            key: (symbol)
            value: (symbol)
            key: (symbol)
            value: (symbol)
            key: (symbol)
            value: (symbol)))
  (list
    call: (symbol)
    item: (symbol)
    item: (sequence
            item: (symbol)
            item: (symbol)
            item: (symbol))
    item: (sequence
            item: (symbol)))
  (list
    call: (symbol)
    item: (multi_symbol
            base: (symbol_fragment)
            member: (symbol_fragment))
    item: (sequence
            item: (symbol)
            item: (symbol)
            item: (symbol)
            item: (symbol))
    item: (list
            call: (symbol)
            item: (symbol))
    item: (list
            call: (symbol)
            item: (symbol))
    item: (list
            call: (symbol)
            item: (symbol)))
  (list
    call: (symbol)
    item: (symbol)
    item: (sequence)
    item: (string
            content: (string_content))
    item: (symbol))
  (list
    call: (symbol)
    item: (symbol)
    item: (sequence)
    item: (string
            content: (string_content))))
