===
function call
===

(test 1 a)
(test (test))

---

(program
  (list
    (symbol)
    (number)
    (symbol))
  (list
    (symbol)
    (list
      (symbol))))

===
method call
===

(test.test:method :arg)
(test.test :method :arg)

---

(program
  (list
    (multi_symbol_method
      (multi_symbol
        (symbol)
        (symbol))
      (symbol))
    (string))
  (list
    (multi_symbol
      (symbol)
      (symbol))
    (string)
    (string)))


===
function definition
===

(fn test [a] a)

---

(program
  (fn
    name: (symbol)
    (parameters
      (symbol))
    body: (symbol)))

===
function definition (dotted)
===

(fn test.test [a] a)

---

(program
  (fn
    name: (multi_symbol
            (symbol)
            (symbol))
    (parameters
      (symbol))
    body: (symbol)))

===
lambda definition
===

(lambda test [a] a)
(Î» test [a] a)

---

(program
  (lambda
    name: (symbol)
    (parameters
      (symbol))
    body: (symbol))
  (lambda
    name: (symbol)
    (parameters
      (symbol))
    body: (symbol)))

===
hash function
===

(hashfn (+ $1 $2))
#(+ $1 $2)
#$3
#[$1 $2 $3]
#$
#val
#[:one :two]

---

(program
  (hashfn
    (list
      (symbol)
      (symbol)
      (symbol)))
  (hashfn
    (list
      (symbol)
      (symbol)
      (symbol)))
  (hashfn
    (symbol))
  (hashfn
    (sequential_table
      (symbol)
      (symbol)
      (symbol)))
  (hashfn
    (symbol))
  (hashfn
    (symbol))
  (hashfn
    (sequential_table
      (string)
      (string))))

===
let definition
===

(let [x (+ 89 5.2)
      f (fn [abc] (print (* 2 abc)))]
  (f x))

(let [(file-handle message code) (io.open "foo.blah")]
  message)

---

(program
  (let
    (let_clause
      (symbol)
      (list
        (symbol)
        (number)
        (number))
      (symbol)
      (fn
        (parameters
          (symbol))
        body: (list
                (symbol)
                (list
                  (symbol)
                  (number)
                  (symbol)))))
    (list
      (symbol)
      (symbol)))
  (let
    (let_clause
      (multi_value_binding
        (symbol)
        (symbol)
        (symbol))
      (list
        (multi_symbol
          (symbol)
          (symbol))
        (string)))
    (symbol)))

===
local definition
===

(local tau-approx 6.28318)
(local (_ _ z) (unpack [:a :b :c :d :e]))

---

(program
  (local
    (symbol)
    (number))
  (local
    (multi_value_binding
      (symbol)
      (symbol)
      (symbol))
    (list
      (symbol)
      (sequential_table
        (string)
        (string)
        (string)
        (string)
        (string)))))

===
var definition
===

(var x 19)
(var (a b) (values 1 2))

---

(program
  (var
    (symbol)
    (number))
  (var
    (multi_value_binding
      (symbol)
      (symbol))
    (list
      (symbol)
      (number)
      (number))))

===
global definition
===

(global add (fn [x y] (+ x y)))
(global (x-m x-e) (math.frexp 21))

---

(program
  (global
    (symbol)
    (fn
      (parameters
        (symbol)
        (symbol))
      body: (list
              (symbol)
              (symbol)
              (symbol))))
  (global
    (multi_value_binding
      (symbol)
      (symbol))
    (list
      (multi_symbol
        (symbol)
        (symbol))
      (number))))

===
set statement
===

(set x (+ x 91))
(set (a b) (values 1 2))
(set a.b 1)
(set b :*)

---

(program
  (set
    (symbol)
    (list
      (symbol)
      (symbol)
      (number)))
  (set
    (multi_value_assignment
      (symbol)
      (symbol))
    (list
      (symbol)
      (number)
      (number)))
  (set
    (multi_symbol
      (symbol)
      (symbol))
    (number))
  (set
    (symbol)
    (string)))

===
tset statement
===

(tset tbl field 19)
(tset tbl "field" b)

---

(program
  (list
    (symbol)
    (symbol)
    (symbol)
    (number))
  (list
    (symbol)
    (symbol)
    (string)
    (symbol)))

===
each loop
===

(each [key value (pairs {"key1" 52 "key2" 99})]
  (print key value))

---

(program
  (each
    (each_clause
      (symbol)
      (symbol)
      iterator: (list
                  (symbol)
                  (table
                    (string)
                    (number)
                    (string)
                    (number))))
    (list
      (symbol)
      (symbol)
      (symbol))))

===
for loop
===

(for [i 1 10]
  (print i))

(for [i 1 10 2]
  (print i))

---

(program
  (for
    (for_clause
      (symbol)
      (number)
      (number))
    (list
      (symbol)
      (symbol)))
  (for
    (for_clause
      (symbol)
      (number)
      (number)
      (number))
    (list
      (symbol)
      (symbol))))

===
while loop
===

(while (keep-looping?)
  (do-something))

---

(program
  (list
    (symbol)
    (list
      (symbol))
    (list
      (symbol))))

===
if statement
===

(let [x (math.random 64)]
  (if (= 0 (% x 2))
      "even"
      (= 0 (% x 10))
      "multiple of ten"
      "I dunno, something else"))

---

(program
  (let
    (let_clause
      (symbol)
      (list
        (multi_symbol
          (symbol)
          (symbol))
        (number)))
    (list
      (symbol)
      (list
        (symbol)
        (number)
        (list
          (symbol)
          (symbol)
          (number)))
      (string)
      (list
        (symbol)
        (number)
        (list
          (symbol)
          (symbol)
          (number)))
      (string)
      (string))))

===
when statement
===

(when (currently-raining?)
  (wear "boots")
  (deploy-umbrella))

---

(program
  (list
    (symbol)
    (list
      (symbol))
    (list
      (symbol)
      (string))
    (list
      (symbol))))

===
do statement
===

(do
  (wear "boots")
  (deploy-umbrella))

---

(program
  (list
    (symbol)
    (list
      (symbol)
      (string))
    (list
      (symbol))))

===
match statement
===

(match a
  b (print "boots")
  8 (deploy-umbrella))

---

(program
  (list
    (symbol)
    (symbol)
    (symbol)
    (list
      (symbol)
      (string))
    (number)
    (list
      (symbol))))

===
require statement
===

(require :module)
(require "module")

---

(program
  (list
    (symbol)
    (string))
  (list
    (symbol)
    (string)))
