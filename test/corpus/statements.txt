===
shebang
===

#!/usr/bin/env fennel
(print "Yummy!")

---

(program
  (shebang)
  (list
    call: (symbol)
    item: (string
            content: (string_content))))

===
function call
===

(test 1 a)
(test (test))

---

(program
  (list
    (symbol)
    (number)
    (symbol))
  (list
    (symbol)
    (list
      (symbol))))

===
method call
===

(foo.bar.baz:method :arg)
(foo.bar.baz :method :arg)

---

(program
  (list
    call: (multi_symbol_method
            base: (multi_symbol
                    base: (symbol_fragment)
                    member: (symbol_fragment)
                    member: (symbol_fragment))
            method: (symbol_fragment))
    item: (string
            content: (string_content)))
  (list
    call: (multi_symbol
            base: (symbol_fragment)
            member: (symbol_fragment)
            member: (symbol_fragment))
    item: (string
            content: (string_content))
    item: (string
            content: (string_content))))

===
case & match
===

(case lol
  (= boogy) 253
  (a b c) (values 1 2 3)
  [a b c] [1 2 3]
  [a b & cs] [1 2 3 4 5 6]
  {: lol :mama mia} {:lol 42 :mama 69})
(match lol
  (= boogy) 253
  (a b c) (values 1 2 3)
  [a b c] [1 2 3]
  [a b & cs] [1 2 3 4 5 6]
  {: lol :mama mia} {:lol 42 :mama 69})

---

(program
  (case_form
    call: (symbol)
    item: (symbol)
    lhs: (list_binding
           item: (symbol_binding)
           item: (symbol_binding))
    rhs: (number)
    lhs: (list_binding
           item: (symbol_binding)
           item: (symbol_binding)
           item: (symbol_binding))
    rhs: (list
           call: (symbol)
           item: (number)
           item: (number)
           item: (number))
    lhs: (sequence_binding
           item: (symbol_binding)
           item: (symbol_binding)
           item: (symbol_binding))
    rhs: (sequence
           item: (number)
           item: (number)
           item: (number))
    lhs: (sequence_binding
           item: (symbol_binding)
           item: (symbol_binding)
           item: (rest_binding
                   lhs: (symbol_option)
                   rhs: (symbol_binding)))
    rhs: (sequence
           item: (number)
           item: (number)
           item: (number)
           item: (number)
           item: (number)
           item: (number))
    lhs: (table_binding
           key: (symbol_binding)
           value: (symbol_binding)
           key: (string_binding
                  content: (string_content))
           value: (symbol_binding))
    rhs: (table
           key: (string
                  content: (string_content))
           value: (number)
           key: (string
                  content: (string_content))
           value: (number)))
  (match_form
    call: (symbol)
    item: (symbol)
    lhs: (list_binding
           item: (symbol_binding)
           item: (symbol_binding))
    rhs: (number)
    lhs: (list_binding
           item: (symbol_binding)
           item: (symbol_binding)
           item: (symbol_binding))
    rhs: (list
           call: (symbol)
           item: (number)
           item: (number)
           item: (number))
    lhs: (sequence_binding
           item: (symbol_binding)
           item: (symbol_binding)
           item: (symbol_binding))
    rhs: (sequence
           item: (number)
           item: (number)
           item: (number))
    lhs: (sequence_binding
           item: (symbol_binding)
           item: (symbol_binding)
           item: (rest_binding
                   lhs: (symbol_option)
                   rhs: (symbol_binding)))
    rhs: (sequence
           item: (number)
           item: (number)
           item: (number)
           item: (number)
           item: (number)
           item: (number))
    lhs: (table_binding
           key: (symbol_binding)
           value: (symbol_binding)
           key: (string_binding
                  content: (string_content))
           value: (symbol_binding))
    rhs: (table
           key: (string
                  content: (string_content))
           value: (number)
           key: (string
                  content: (string_content))
           value: (number))))

===
case-try & match-try
===

(case-try (conn:receive :*l)
  input (parse input)
  (command-name params (= token)) (commands.get command-name)
  command (pcall command (table.unpack params))
  (catch
    (_ :timeout) nil
    (_ :closed) (pcall disconnect conn "connection closed")
    (_ msg) (print "Error handling input" msg)))
(match-try (conn:receive :*l)
  input (parse input)
  (command-name params (= token)) (commands.get command-name)
  command (pcall command (table.unpack params))
  (catch
    (_ :timeout) nil
    (_ :closed) (pcall disconnect conn "connection closed")
    (_ msg) (print "Error handling input" msg)))

---

(program
  (case_try_form
    call: (symbol)
    item: (list
            call: (multi_symbol_method
                    base: (symbol_fragment)
                    method: (symbol_fragment))
            item: (string
                    content: (string_content)))
    lhs: (symbol_binding)
    rhs: (list
           call: (symbol)
           item: (symbol))
    lhs: (list_binding
           item: (symbol_binding)
           item: (symbol_binding)
           item: (list_binding
                   item: (symbol_binding)
                   item: (symbol_binding)))
    rhs: (list
           call: (multi_symbol
                   base: (symbol_fragment)
                   member: (symbol_fragment))
           item: (symbol))
    lhs: (symbol_binding)
    rhs: (list
           call: (symbol)
           item: (symbol)
           item: (list
                   call: (multi_symbol
                           base: (symbol_fragment)
                           member: (symbol_fragment))
                   item: (symbol)))
    catch: (case_catch
             call: (symbol)
             lhs: (list_binding
                    item: (symbol_binding)
                    item: (string_binding
                            content: (string_content)))
             rhs: (nil)
             lhs: (list_binding
                    item: (symbol_binding)
                    item: (string_binding
                            content: (string_content)))
             rhs: (list
                    call: (symbol)
                    item: (symbol)
                    item: (symbol)
                    item: (string
                            content: (string_content)))
             lhs: (list_binding
                    item: (symbol_binding)
                    item: (symbol_binding))
             rhs: (list
                    call: (symbol)
                    item: (string
                            content: (string_content))
                    item: (symbol))))
  (match_try_form
    call: (symbol)
    item: (list
            call: (multi_symbol_method
                    base: (symbol_fragment)
                    method: (symbol_fragment))
            item: (string
                    content: (string_content)))
    lhs: (symbol_binding)
    rhs: (list
           call: (symbol)
           item: (symbol))
    lhs: (list_binding
           item: (symbol_binding)
           item: (symbol_binding)
           item: (list_binding
                   item: (symbol_binding)
                   item: (symbol_binding)))
    rhs: (list
           call: (multi_symbol
                   base: (symbol_fragment)
                   member: (symbol_fragment))
           item: (symbol))
    lhs: (symbol_binding)
    rhs: (list
           call: (symbol)
           item: (symbol)
           item: (list
                   call: (multi_symbol
                           base: (symbol_fragment)
                           member: (symbol_fragment))
                   item: (symbol)))
    catch: (case_catch
             call: (symbol)
             lhs: (list_binding
                    item: (symbol_binding)
                    item: (string_binding
                            content: (string_content)))
             rhs: (nil)
             lhs: (list_binding
                    item: (symbol_binding)
                    item: (string_binding
                            content: (string_content)))
             rhs: (list
                    call: (symbol)
                    item: (symbol)
                    item: (symbol)
                    item: (string
                            content: (string_content)))
             lhs: (list_binding
                    item: (symbol_binding)
                    item: (symbol_binding))
             rhs: (list
                    call: (symbol)
                    item: (string
                            content: (string_content))
                    item: (symbol))))
  )
