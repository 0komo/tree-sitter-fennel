===
shebang
===

#!/usr/bin/env fennel
(print "Yummy!")

---

(program
  (shebang)
  (list
    call: (symbol)
    item: (string
            content: (string_content))))

===
let form
===

(let [key value
      (one two three) (values 1 2 3)
      [a & bs] [1 2 3 4]]
  (print :one)
  (print "two"))

---

(program
  (let_form
    call: (symbol)
    vars: (let_form_vars
            lhs: (symbol_binding)
            rhs: (symbol)
            lhs: (list_binding
                   item: (symbol_binding)
                   item: (symbol_binding)
                   item: (symbol_binding))
            rhs: (list
                   call: (symbol)
                   item: (number)
                   item: (number)
                   item: (number))
            lhs: (sequence_binding
                   item: (symbol_binding)
                   item: (rest_binding
                           lhs: (symbol_option)
                           rhs: (symbol_binding)))
            rhs: (sequence
                   item: (number)
                   item: (number)
                   item: (number)
                   item: (number)))
    item: (list
            call: (symbol)
            item: (string
                    content: (string_content)))
    item: (list
            call: (symbol)
            item: (string
                    content: (string_content)))))

===
function call
===

(test 1 a)
(test (test))

---

(program
  (list
    (symbol)
    (number)
    (symbol))
  (list
    (symbol)
    (list
      (symbol))))

===
method call
===

(foo.bar.baz:method :arg)
(foo.bar.baz :method :arg)

---

(program
  (list
    call: (multi_symbol_method
            base: (multi_symbol
                    base: (symbol_fragment)
                    member: (symbol_fragment)
                    member: (symbol_fragment))
            method: (symbol_fragment))
    item: (string
            content: (string_content)))
  (list
    call: (multi_symbol
            base: (symbol_fragment)
            member: (symbol_fragment)
            member: (symbol_fragment))
    item: (string
            content: (string_content))
    item: (string
            content: (string_content))))

===
function definition
===

(fn abcs [a b c] {: a : b : c})
(fn abcs-but-with-varargs [a b ...] [...])

(lambda ab.cs [a b & cs]
  (print a)
  (print b)
  (print cs))

---

(program
  (fn_form
    call: (symbol)
    name: (symbol)
    args: (sequence_arguments
            item: (symbol_binding)
            item: (symbol_binding)
            item: (symbol_binding))
    item: (table
            key: (symbol)
            value: (symbol)
            key: (symbol)
            value: (symbol)
            key: (symbol)
            value: (symbol)))
  (fn_form
    call: (symbol)
    name: (symbol)
    args: (sequence_arguments
            item: (symbol_binding)
            item: (symbol_binding)
            item: (symbol_binding))
    item: (sequence
            item: (symbol)))
  (lambda_form
    call: (symbol)
    name: (multi_symbol
            base: (symbol_fragment)
            member: (symbol_fragment))
    args: (sequence_arguments
            item: (symbol_binding)
            item: (symbol_binding)
            item: (rest_binding
                    lhs: (symbol_option)
                    rhs: (symbol_binding)))
    item: (list
            call: (symbol)
            item: (symbol))
    item: (list
            call: (symbol)
            item: (symbol))
    item: (list
            call: (symbol)
            item: (symbol))))

===
function metadata
===

(Œª ooo-docstring [] :docstring a)
(Œª booo-no-docstring [] :not-docstring)

(fn ayo-some-metadata-over-here [a b & cs]
  "This function does something..."
  {"fnl/arglist" [a b & cs]
   :fnl/docstring "Ha! Now it's a different docstring!"
   "deprecated" "0.9"}
  b)

(lambda just-meta-no-doc [a b c]
  {"dawg" "üêï"}
  c)

---

(program
  (lambda_form
    call: (symbol)
    name: (symbol)
    args: (sequence_arguments)
    docstring: (docstring
                 content: (string_content))
    item: (symbol))
  (lambda_form
    call: (symbol)
    name: (symbol)
    args: (sequence_arguments)
    item: (string
            content: (string_content)))
  (fn_form
    call: (symbol)
    name: (symbol)
    args: (sequence_arguments
            item: (symbol_binding)
            item: (symbol_binding)
            item: (rest_binding
                    lhs: (symbol_option)
                    rhs: (symbol_binding)))
    docstring: (docstring
                 content: (string_content))
    metadata: (table_metadata
                key: (string
                       content: (string_content))
                value: (sequence_arguments
                         item: (symbol_binding)
                         item: (symbol_binding)
                         item: (rest_binding
                                 lhs: (symbol_option)
                                 rhs: (symbol_binding)))
                key: (string
                       content: (string_content))
                value: (docstring
                         content: (string_content))
                key: (string
                       content: (string_content))
                value: (string
                         content: (string_content)))
    item: (symbol))
  (lambda_form
    call: (symbol)
    name: (symbol)
    args: (sequence_arguments
            item: (symbol_binding)
            item: (symbol_binding)
            item: (symbol_binding))
    metadata: (table_metadata
                key: (string
                       content: (string_content))
                value: (string
                         content: (string_content)))
    item: (symbol)))
